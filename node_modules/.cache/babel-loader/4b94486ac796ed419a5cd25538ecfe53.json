{"ast":null,"code":"const node = {\n  row,\n  col,\n  isVisited,\n  distance\n};\n\nfunction dijkstra(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  nodes[startNode].distance = 0;\n  const unvisitedNodes = nodes.slice();\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.unshift(); //HANDLE WALLS LATER.\n    //while (currentNode.status === 'wall' && unvisitedNodes.length) {\n    //  currentNode = getClosestNode(nodes, unvisitedNodes)\n    //}\n    //HANDLE IMPOSSIBLE LATER.\n    //if (closestNode.distance === Infinity) return false;\n    //ANIMATE LATER.\n    //nodesToAnimate.push(closestNode);\n\n    closestNode.isVisited = true;\n    if (closestNode === finishNode) return \"success!\";\n    updateNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getNeighbors(node, table) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(table[row - 1][col]);\n  if (row < table.length - 1) neighbors.push(table[row + 1][col]);\n  if (col > 0) neighbors.push(table[row][col - 1]);\n  if (col < table[0].length - 1) neighbors.push(table[row][col + 1]);\n  return neighbors;\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/pathfinder/visualizer/src/algorithms/dijkstra.js"],"names":["node","row","col","isVisited","distance","dijkstra","grid","startNode","finishNode","nodes","unvisitedNodes","slice","length","sortNodesByDistance","closestNode","unshift","updateNeighbors","sort","nodeA","nodeB","neighbors","getNeighbors","neighbor","table","push"],"mappings":"AAAA,MAAMA,IAAI,GAAG;AACXC,EAAAA,GADW;AAEXC,EAAAA,GAFW;AAGXC,EAAAA,SAHW;AAIXC,EAAAA;AAJW,CAAb;;AAOA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AAC7C,MAAI,CAACD,SAAD,IAAc,CAACC,UAAf,IAA6BD,SAAS,KAAKC,UAA/C,EAA2D;AACzD,WAAO,KAAP;AACD;;AACDC,EAAAA,KAAK,CAACF,SAAD,CAAL,CAAiBH,QAAjB,GAA4B,CAA5B;AACA,QAAMM,cAAc,GAAGD,KAAK,CAACE,KAAN,EAAvB;;AACA,SAAO,CAAC,CAACD,cAAc,CAACE,MAAxB,EAAgC;AAC9BC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB;AACA,UAAMI,WAAW,GAAGJ,cAAc,CAACK,OAAf,EAApB,CAF8B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,IAAAA,WAAW,CAACX,SAAZ,GAAwB,IAAxB;AACA,QAAIW,WAAW,KAAKN,UAApB,EAAgC,OAAO,UAAP;AAChCQ,IAAAA,eAAe,CAACF,WAAD,EAAcR,IAAd,CAAf;AACD;AACF;;AAED,SAASO,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACO,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACd,QAAN,GAAiBe,KAAK,CAACf,QAA7D;AACD;;AAED,SAASY,eAAT,CAAyBhB,IAAzB,EAA+BM,IAA/B,EAAqC;AACnC,QAAMc,SAAS,GAAGC,YAAY,CAACrB,IAAD,EAAOM,IAAP,CAA9B;;AACA,OAAK,MAAMgB,QAAX,IAAuBF,SAAvB,EAAkC;AAChCE,IAAAA,QAAQ,CAAClB,QAAT,GAAoBJ,IAAI,CAACI,QAAL,GAAgB,CAApC;AACD;AACF;;AAED,SAASiB,YAAT,CAAsBrB,IAAtB,EAA4BuB,KAA5B,EAAmC;AACjC,QAAMH,SAAS,GAAG,EAAlB;AACA,QAAM;AAAElB,IAAAA,GAAF;AAAOD,IAAAA;AAAP,MAAeD,IAArB;AACA,MAAIC,GAAG,GAAG,CAAV,EAAamB,SAAS,CAACI,IAAV,CAAeD,KAAK,CAACtB,GAAG,GAAG,CAAP,CAAL,CAAeC,GAAf,CAAf;AACb,MAAID,GAAG,GAAGsB,KAAK,CAACX,MAAN,GAAe,CAAzB,EAA4BQ,SAAS,CAACI,IAAV,CAAeD,KAAK,CAACtB,GAAG,GAAG,CAAP,CAAL,CAAeC,GAAf,CAAf;AAC5B,MAAIA,GAAG,GAAG,CAAV,EAAakB,SAAS,CAACI,IAAV,CAAeD,KAAK,CAACtB,GAAD,CAAL,CAAWC,GAAG,GAAG,CAAjB,CAAf;AACb,MAAIA,GAAG,GAAGqB,KAAK,CAAC,CAAD,CAAL,CAASX,MAAT,GAAkB,CAA5B,EAA+BQ,SAAS,CAACI,IAAV,CAAeD,KAAK,CAACtB,GAAD,CAAL,CAAWC,GAAG,GAAG,CAAjB,CAAf;AAC/B,SAAOkB,SAAP;AACD","sourcesContent":["const node = {\n  row,\n  col,\n  isVisited,\n  distance,\n};\n\nfunction dijkstra(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  nodes[startNode].distance = 0;\n  const unvisitedNodes = nodes.slice();\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.unshift();\n    //HANDLE WALLS LATER.\n    //while (currentNode.status === 'wall' && unvisitedNodes.length) {\n    //  currentNode = getClosestNode(nodes, unvisitedNodes)\n    //}\n    //HANDLE IMPOSSIBLE LATER.\n    //if (closestNode.distance === Infinity) return false;\n    //ANIMATE LATER.\n    //nodesToAnimate.push(closestNode);\n    closestNode.isVisited = true;\n    if (closestNode === finishNode) return \"success!\";\n    updateNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getNeighbors(node, table) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(table[row - 1][col]);\n  if (row < table.length - 1) neighbors.push(table[row + 1][col]);\n  if (col > 0) neighbors.push(table[row][col - 1]);\n  if (col < table[0].length - 1) neighbors.push(table[row][col + 1]);\n  return neighbors;\n}\n"]},"metadata":{},"sourceType":"module"}