{"ast":null,"code":"var _jsxFileName = \"/Users/derekxu/Documents/pathfinder/visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathfindingVisualizer.css\";\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === 10 && col === 5,\n          isFinish: row === 10 && col === 45\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, nodes.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          isStart,\n          isFinish\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          isStart: isStart,\n          isFinish: isFinish,\n          test: \"foo\",\n          test: \"kappa\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/pathfinder/visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","nodes","componentDidMount","row","currentRow","col","currentNode","isStart","isFinish","push","setState","render","console","log","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,6BAAP;AAEA,eAAe,MAAMC,qBAAN,SAAoCF,SAApC,CAA8C;AAC3DG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMD,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,cAAMC,WAAW,GAAG;AAClBD,UAAAA,GADkB;AAElBF,UAAAA,GAFkB;AAGlBI,UAAAA,OAAO,EAAEJ,GAAG,KAAK,EAAR,IAAcE,GAAG,KAAK,CAHb;AAIlBG,UAAAA,QAAQ,EAAEL,GAAG,KAAK,EAAR,IAAcE,GAAG,KAAK;AAJd,SAApB;AAMAD,QAAAA,UAAU,CAACK,IAAX,CAAgBH,WAAhB;AACD;;AACDL,MAAAA,KAAK,CAACQ,IAAN,CAAWL,UAAX;AACD;;AACD,SAAKM,QAAL,CAAc;AAAET,MAAAA;AAAF,KAAd;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEV,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KAAK,CAACa,GAAN,CAAU,CAACX,GAAD,EAAMY,MAAN,KAAiB;AAC1B,0BACE;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGZ,GAAG,CAACW,GAAJ,CAAQ,CAACE,IAAD,EAAOC,OAAP,KAAmB;AAC1B,cAAM;AAAEV,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAwBQ,IAA9B;AACA,4BACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEC,OADP;AAEE,UAAA,OAAO,EAAEV,OAFX;AAGE,UAAA,QAAQ,EAAEC,QAHZ;AAIE,UAAA,IAAI,EAAE,KAJR;AAKE,UAAA,IAAI,EAAE,OALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,OAXA,CADH,CADF;AAgBD,KAjBA,CADH,CADF;AAsBD;;AApD0D","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\n\nimport \"./PathfindingVisualizer.css\";\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: [],\n    };\n  }\n\n  componentDidMount() {\n    const nodes = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === 10 && col === 5,\n          isFinish: row === 10 && col === 45,\n        };\n        currentRow.push(currentNode);\n      }\n      nodes.push(currentRow);\n    }\n    this.setState({ nodes });\n  }\n\n  render() {\n    const { nodes } = this.state;\n    console.log(nodes);\n\n    return (\n      <div className=\"grid\">\n        {nodes.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isFinish } = node;\n                return (\n                  <Node\n                    key={nodeIdx}\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    test={\"foo\"}\n                    test={\"kappa\"}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}