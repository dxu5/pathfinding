{"ast":null,"code":"var _jsxFileName = \"/Users/derekxu/Documents/pathfinder/visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport \"./PathfindingVisualizer.css\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 20 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isStart: isStart,\n          isFinish: isFinish,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/derekxu/Documents/pathfinder/visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","i","length","setTimeout","node","slice","newNode","isVisited","visualizeDijkstra","startNode","finishNode","nodesInShortestPathOrder","render","map","rowIdx","nodeIdx","isStart","isFinish","isWall","currentRow","push","createNode","distance","Infinity","previousNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\n\nimport \"./PathfindingVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({ grid: newGrid });\n      }, 20 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isStart, isFinish, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}