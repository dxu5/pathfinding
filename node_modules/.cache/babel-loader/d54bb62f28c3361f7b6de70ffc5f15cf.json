{"ast":null,"code":"const node = {\n  row,\n  col,\n  isVisited,\n  distance\n};\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbot => !neighbor.isVisited);\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/pathfinder/visualizer/src/algorithms/dijkstra.js"],"names":["node","row","col","isVisited","distance","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","neighbot"],"mappings":"AAAA,MAAMA,IAAI,GAAG;AACXC,EAAAA,GADW;AAEXC,EAAAA,GAFW;AAGXC,EAAAA,SAHW;AAIXC,EAAAA;AAJW,CAAb;AAOA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AACpD,QAAMC,mBAAmB,GAAG,EAA5B;AACAF,EAAAA,SAAS,CAACH,QAAV,GAAqB,CAArB;AACA,QAAMM,cAAc,GAAGC,WAAW,CAACL,IAAD,CAAlC;;AACA,SAAO,CAAC,CAACI,cAAc,CAACE,MAAxB,EAAgC;AAC9BC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB;AACA,UAAMI,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAApB;AACAD,IAAAA,WAAW,CAACX,SAAZ,GAAwB,IAAxB;AACAM,IAAAA,mBAAmB,CAACO,IAApB,CAAyBF,WAAzB;AACA,QAAIA,WAAW,KAAKN,UAApB,EAAgC,OAAOC,mBAAP;AAChCQ,IAAAA,wBAAwB,CAACH,WAAD,EAAcR,IAAd,CAAxB;AACD;AACF;;AAED,SAASO,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACQ,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACf,QAAN,GAAiBgB,KAAK,CAAChB,QAA7D;AACD;;AAED,SAASa,wBAAT,CAAkCjB,IAAlC,EAAwCM,IAAxC,EAA8C;AAC5C,QAAMe,kBAAkB,GAAGC,qBAAqB,CAACtB,IAAD,EAAOM,IAAP,CAAhD;;AACA,OAAK,MAAMiB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAACnB,QAAT,GAAoBJ,IAAI,CAACI,QAAL,GAAgB,CAApC;AACAmB,IAAAA,QAAQ,CAACC,YAAT,GAAwBxB,IAAxB;AACD;AACF;;AAED,SAASsB,qBAAT,CAA+BtB,IAA/B,EAAqCM,IAArC,EAA2C;AACzC,QAAMmB,SAAS,GAAG,EAAlB;AACA,QAAM;AAAEvB,IAAAA,GAAF;AAAOD,IAAAA;AAAP,MAAeD,IAArB;AACA,MAAIC,GAAG,GAAG,CAAV,EAAawB,SAAS,CAACT,IAAV,CAAeV,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAf;AACb,MAAID,GAAG,GAAGK,IAAI,CAACM,MAAL,GAAc,CAAxB,EAA2Ba,SAAS,CAACT,IAAV,CAAeV,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAauB,SAAS,CAACT,IAAV,CAAeV,IAAI,CAACL,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGI,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,GAAiB,CAA3B,EAA8Ba,SAAS,CAACT,IAAV,CAAeV,IAAI,CAACL,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOuB,SAAS,CAACC,MAAV,CAAkBC,QAAD,IAAc,CAACJ,QAAQ,CAACpB,SAAzC,CAAP;AACD","sourcesContent":["const node = {\n  row,\n  col,\n  isVisited,\n  distance,\n};\n\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbot) => !neighbor.isVisited);\n}\n"]},"metadata":{},"sourceType":"module"}